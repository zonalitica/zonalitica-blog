<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on </title>
    <link>/categories/python/</link>
    <description>Recent content in Python on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sat, 02 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Comandos Básicos en Anaconda</title>
      <link>/post/comandos-basicos-en-anaconda/</link>
      <pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/comandos-basicos-en-anaconda/</guid>
      <description>Como les comente en el anterior post Anaconda es un ecosistema que nos permite instalar y administar multiple versiones de Python junto con más de 1000 paquetes y todas sus dependencias.
Quiero aclarar que estos comandos se llevan a cabo en el terminal o línea de comando pero los mismos también se puede ejecutar directamente en Anaconda usando la versión gráfica (anaconda-navigator) y unos cuantos clicks.
Comandos Básicos    Tarea Comando     Verificar versión de conda está instalada conda info   Actualizar coda a la versión mas reciente conda update conda   Instalar un paquete incluido en Anaconda conda install PACKAGENAME   Ejecutar un paquete después de instalación, ej.</description>
    </item>
    
    <item>
      <title>Introducción a Anaconda</title>
      <link>/post/introduccion-a-anaconda/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/introduccion-a-anaconda/</guid>
      <description>Mis aventuras con Python empezarón por allá en el 2010 y desde entonces he trabajado con esta herramienta de forma intermitente. Como algunos de ustedes saben Python viene en varias formas y colores, con esto quiero decir que distintas distribuciones que pueden ser instaladas en un momento dado.
Por lo general, la gente descarga Python de python.org lo cual es más que suficiente para la mayoría de las tareas básicas pero la perspectiva cambia cuando se trata de usar paquetes con referencia a Data Science.</description>
    </item>
    
    <item>
      <title>Introducción a Expresiones Regulares con Python</title>
      <link>/post/introduccion-a-expresiones-regulares-con-python/</link>
      <pubDate>Thu, 24 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/introduccion-a-expresiones-regulares-con-python/</guid>
      <description>Este es el primer post de una serie de artículos sobre NLP. Para los que no conocen que es el procesamiento de lenguajes naturales o Natural Language Processing (NLP) aquí les dejo una corta pero concisa definición:
 &amp;hellip;es un campo de las ciencias de la computación, inteligencia artificial y lingüística que estudia las interacciones entre las computadoras y el lenguaje humano. El NLP se ocupa de la formulación e investigación de mecanismos eficaces computacionalmente para la comunicación entre personas y máquinas por medio de lenguajes naturales.</description>
    </item>
    
    <item>
      <title>3 Métodos para generar datos falsos o de prueba</title>
      <link>/post/generar-datos-falsos-o-de-prueba/</link>
      <pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/generar-datos-falsos-o-de-prueba/</guid>
      <description>Cuando se esta desarrollando una aplicación, hay asegurarse de probarla bajo condiciones que simulan de cerca un entorno de producción. Ya sea que estas desarrollando una interfaz de usuario o un modelo predictivo si introduces datos manualmente en tu entorno de prueba de un registro a la vez o creando unos algunos casos ficticios en Excel, nunca vas a acumular el volumen y la variedad de datos que tu aplicación acumulará en unos pocos días en producción.</description>
    </item>
    
  </channel>
</rss>